service: workshop-${self:custom.name}
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs20.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "xray:PutTelemetryRecords"
            - "xray:PutTraceSegments"
          Resource: "*"
  tracing:
    apiGateway: true
    lambda: true
  environment:
    rest_api_url: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}    
    service_name: ${self:service}
    stage: ${sls:stage}
    ssmStage: ${param:ssmStage, sls:stage}
    LOG_LEVEL: ${self:custom.logLevel.${sls:stage}, self:custom.logLevel.default}
    POWERTOOLS_LOGGER_SAMPLE_RATE: 0.1 # 10% of logs will be sampled
    POWERTOOLS_LOGGER_LOG_EVENT: true

custom:
  name: production-ready-serverless
  logLevel:
    default: INFO
    prod: ERROR
  export-env:
    overwrite: true
  exportOutputs:
    include:
      - E2ETestQueueUrl
      - ServerClientId
    output:
      file: ./.env.cfnoutputs
  serverless-iam-roles-per-function:
    defaultInherit: true
  esbuild:
    minify: true
    external:
      - '@aws-sdk/*'

package:
  individually: true

plugins:
  - serverless-export-env
  - serverless-export-outputs
  - serverless-plugin-extrinsic-functions
  - serverless-iam-roles-per-function
  - serverless-esbuild

functions:
  get-index:
    handler: functions/get-index.handler
    events:
      - http:
          path: /
          method: get
    environment:
      restaurants_api: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}/restaurants
      cognito_user_pool_id: !Ref CognitoUserPool
      cognito_client_id: !Ref WebCognitoUserPoolClient
      rest_api_url: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}
      orders_api: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}/orders
    iamRoleStatements:
      - Effect: Allow
        Action:
          - execute-api:Invoke
        Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${sls:stage}/GET/restaurants
    package:
      include:
        - static/*
  get-restaurants:
    handler: functions/get-restaurants.handler
    events:
      - http:
          path: /restaurants
          method: get
          authorizer: aws_iam
    environment:
      # default_results: 8
      restaurants_table: !Ref RestaurantsTable
    iamRoleStatementsName: !Sub "${self:service}-${sls:stage}-get-restaurants"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:scan
        Resource: !GetAtt RestaurantsTable.Arn
      - Effect: Allow
        Action:
          - ssm:GetParameters
        Resource:
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${param:ssmStage, sls:stage}/get-restaurants/config
  search-restaurants:
    handler: functions/search-restaurants.handler
    events:
      - http:
          path: /restaurants/search
          method: post
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      restaurants_table: !Ref RestaurantsTable
    iamRoleStatementsName: !Sub "${self:service}-${sls:stage}-search-restaurants"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt RestaurantsTable.Arn
      - Effect: Allow
        Action:
          - ssm:GetParameters
        Resource:
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${param:ssmStage, sls:stage}/search-restaurants/config
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${param:ssmStage, sls:stage}/search-restaurants/secret-string
  place-order:
    handler: functions/place-order.handler
    events:
      - http:
          path: /orders
          method: post
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      event_bus_name: !Ref EventBus
    iamRoleStatements:
      - Effect: Allow
        Action:
          - events:PutEvents
        Resource: !GetAtt EventBus.Arn
  notify-restaurant:
    handler: functions/notify-restaurant.handler
    events:
      - eventBridge:
          eventBus: !Ref EventBus
          pattern:
            source:
              - big-mouth
            detail-type:
              - order-placed
    destinations:
      onFailure:
        type: sqs
        arn: !GetAtt OnFailureQueue.Arn
    environment:
      event_bus_name: !Ref EventBus
      restaurant_notification_topic: !Ref RestaurantNotificationTopic
      idempotency_table: !Ref IdempotencyTable
    iamRoleStatementsName: !Sub "${self:service}-${sls:stage}-notify-restaurant"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - events:PutEvents
        Resource: !GetAtt EventBus.Arn
      - Effect: Allow
        Action:
          - sns:Publish
        Resource: !Ref RestaurantNotificationTopic
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource: !GetAtt IdempotencyTable.Arn
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource: !GetAtt OnFailureQueue.Arn
resources:
  Conditions:
    IsE2ETest:
      Fn::StartsWith:
        - ${sls:stage}
        - dev
  Resources:
    RestaurantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AliasAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: false
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
        Schema:
          - AttributeDataType: String
            Name: given_name
            Mutable: true
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
          - AttributeDataType: String
            Name: family_name
            Mutable: true
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
          - AttributeDataType: String
            Name: email
            Mutable: true
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
    WebCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    ServerCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: server
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    ParameterStoreGetRestaurantsConfig:
      Type: AWS::SSM::Parameter
      Properties:
        DataType: text
        Description: Configuration for the get-restaurants function
        Name: /${self:service}/${sls:stage}/get-restaurants/config
        Tier: Standard
        Type: String
        Value: '{"default_results":8}'
    ParameterStoreSearchRestaurantsConfig:
      Type: AWS::SSM::Parameter
      Properties:
        DataType: text
        Description: Configuration for the search-restaurants function
        Name: /${self:service}/${sls:stage}/search-restaurants/config
        Tier: Standard
        Type: String
        Value: '{"default_results":8}'
    ParameterStoreServiceUrl:
      Type: AWS::SSM::Parameter
      Properties:
        DataType: text
        Description: Service URL
        Name: /${self:service}/${sls:stage}/service-url
        Tier: Standard
        Type: String
        Value: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}
    EventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: !Sub ${self:custom.name}-${sls:stage}-order-events
    RestaurantNotificationTopic:
      Type: AWS::SNS::Topic
    E2ETestQueue:
      Type: AWS::SQS::Queue
      Condition: IsE2ETest
      Properties:
        MessageRetentionPeriod: 60
        VisibilityTimeout: 1
    E2ETestQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Condition: IsE2ETest
      Properties:
        Queues:
          - !Ref E2ETestQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: SQS:SendMessage
              Resource: !GetAtt E2ETestQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref RestaurantNotificationTopic
            - Effect: Allow
              Principal: "*"
              Action: SQS:SendMessage
              Resource: !GetAtt E2ETestQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt E2ETestEventBridgeRule.Arn
    E2ETestSNSSubscription:
      Type: AWS::SNS::Subscription
      Condition: IsE2ETest
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt E2ETestQueue.Arn
        RawMessageDelivery: false
        Region: !Ref AWS::Region
        TopicArn: !Ref RestaurantNotificationTopic
    E2ETestEventBridgeRule:
      Type: AWS::Events::Rule
      Condition: IsE2ETest
      Properties:
        EventBusName: !Ref EventBus
        EventPattern:
          source:
            - big-mouth
        State: ENABLED
        Targets:
          - Arn: !GetAtt E2ETestQueue.Arn
            Id: e2eTestQueue
            InputTransformer:
              InputPathsMap:
                source: "$.source"
                detailType: "$.detail-type"
                detail: "$.detail"
              InputTemplate: !Sub >
                {
                  "event": {
                    "source": <source>,
                    "detail-type": <detailType>,
                    "detail": <detail>
                  },
                  "eventBusName": "${EventBus}"
                }
    IdempotencyTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        TimeToLiveSpecification:
          Enabled: true
          AttributeName: expiration
    OnFailureQueue:
      Type: AWS::SQS::Queue
      Properties:
        MessageRetentionPeriod: 60
        VisibilityTimeout: 1
    AlarmTopic:
      Type: AWS::SNS::Topic
    AlarmTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: thierrysantoos123+cloudwatch@gmail.com
        Protocol: email
        TopicArn: !Ref AlarmTopic
    OnFailureQueueAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: '[${sls:stage}] failed events detected in the onFailure destination from the notify-restaurant function'
        MetricName: ApproximateNumberOfMessagesVisible
        Namespace: AWS/SQS
        Statistic: Maximum
        Period: 300
        EvaluationPeriods: 1
        Threshold: 0
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
        Dimensions:
          - Name: QueueName
            Value: !GetAtt OnFailureQueue.QueueName
        AlarmActions:
          - !Ref AlarmTopic
    DestinationDeliveryFailuresAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: '[${sls:stage}] notify-restaurant function failed to deliver message to the onFailure destination'
        MetricName: DestinationDeliveryFailures
        Namespace: AWS/Lambda
        Statistic: Average
        Period: 300
        EvaluationPeriods: 1
        Threshold: 0
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
        Dimensions:
          - Name: FunctionName
            Value: !Ref NotifyDashrestaurantLambdaFunction
        AlarmActions:
          - !Ref AlarmTopic
  Outputs:
    RestaurantsTableName:
      Value: !Ref RestaurantsTable
    CognitoUserPoolId:
      Value: !Ref CognitoUserPool
    CognitoUserPoolArn:
      Value: !GetAtt CognitoUserPool.Arn
    WebClientId:
      Value: !Ref WebCognitoUserPoolClient
    ServerClientId:
      Value: !Ref ServerCognitoUserPoolClient
    ParameterStoreGetRestaurantsConfig:
      Value: !Ref ParameterStoreGetRestaurantsConfig
    ParameterStoreSearchRestaurantsConfig:
      Value: !Ref ParameterStoreSearchRestaurantsConfig
    ParameterStoreServiceUrl:
      Value: !Ref ParameterStoreServiceUrl
    EventBusName:
      Value: !Ref EventBus
    RestaurantNotificationTopicName:
      Value: !Ref RestaurantNotificationTopic
    E2ETestQueueUrl:
      Condition: IsE2ETest
      Value: !Ref E2ETestQueue